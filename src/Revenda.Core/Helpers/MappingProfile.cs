using AutoMapper;
using Revenda.Core.Entities;
using Revenda.Core.UseCases.GetRevendaById;
using Revenda.Core.UseCases.Revenda.CreateRevenda;

namespace Revenda.Core.Helpers
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // --- Revenda Mappings ---

            // Mapping from Revenda Entity to RevendaDto for Queries
            CreateMap<RevendaEntity, RevendaDto>()
                // AutoMapper handles mapping collections by convention if names match
                .ForMember(dest => dest.Telefones, opt => opt.MapFrom(src => src.Telefones))
                .ForMember(dest => dest.NomesContato, opt => opt.MapFrom(src => src.NomesContato))
                .ForMember(dest => dest.EnderecosEntrega, opt => opt.MapFrom(src => src.EnderecosEntrega));
            // Other properties like Id, Cnpj, RazaoSocial, etc., are mapped automatically by name convention.

            // Mapping for nested DTOs used in RevendaDto
            CreateMap<Telefone, TelefoneDto>();
            CreateMap<NomeContato, NomeContatoDto>();
            CreateMap<EnderecoEntrega, EnderecoEntregaDto>();

            // Optional: Mapping from CreateRevendaCommand to Revenda Entity
            // Note: Handling collections (Telefones, NomesContato, EnderecosEntrega) often requires
            // custom logic in the Command Handler rather than relying solely on AutoMapper,
            // especially for adding new related entities. This mapping might be less useful in practice.
            CreateMap<CreateRevendaCommand, RevendaEntity>()
                // Ignore collections as they are typically handled manually in the handler
                .ForMember(dest => dest.Telefones, opt => opt.Ignore())
                .ForMember(dest => dest.NomesContato, opt => opt.Ignore())
                .ForMember(dest => dest.EnderecosEntrega, opt => opt.Ignore())
                .ForMember(dest => dest.PedidosCliente, opt => opt.Ignore())
                .ForMember(dest => dest.Pedidos, opt => opt.Ignore())
                .ForMember(dest => dest.Id, opt => opt.Ignore()); // ID is generated by the entity/database

            // Mapping for nested DTOs in CreateRevendaCommand (if needed elsewhere, but less common for command -> entity)
            CreateMap<CreateTelefoneDto, Telefone>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.RevendaId, opt => opt.Ignore())
                .ForMember(dest => dest.Revenda, opt => opt.Ignore());
            CreateMap<CreateNomeContatoDto, NomeContato>()
                 .ForMember(dest => dest.Id, opt => opt.Ignore())
                 .ForMember(dest => dest.RevendaId, opt => opt.Ignore())
                 .ForMember(dest => dest.Revenda, opt => opt.Ignore());
            CreateMap<CreateEnderecoEntregaDto, EnderecoEntrega>()
                 .ForMember(dest => dest.Id, opt => opt.Ignore())
                 .ForMember(dest => dest.RevendaId, opt => opt.Ignore())
                 .ForMember(dest => dest.Revenda, opt => opt.Ignore());
        }
    }
}
