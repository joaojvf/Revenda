// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Revenda.MigrationService.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250422201649_MyNewMigration")]
    partial class MyNewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Revenda.Core.Entities.EnderecoEntrega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("EnderecosEntrega");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab6a9eb5-933e-4cdd-9505-7a292f8958c5"),
                            Bairro = "Distrito Industrial",
                            Cep = "13000100",
                            Cidade = "Campinas",
                            Complemento = "Galpão A",
                            Estado = "SP",
                            Logradouro = "Rua Principal",
                            Numero = "100",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("04b309dd-962d-4282-ab19-b28cff2306c8"),
                            Bairro = "Vila Industrial",
                            Cep = "13000200",
                            Cidade = "Campinas",
                            Estado = "SP",
                            Logradouro = "Avenida dos Expedicionários",
                            Numero = "2000",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("fb04686a-9c1e-4f32-af61-c585d269603e"),
                            Bairro = "Centro",
                            Cep = "20000050",
                            Cidade = "Rio de Janeiro",
                            Estado = "RJ",
                            Logradouro = "Rua das Flores",
                            Numero = "50",
                            RevendaId = new Guid("a2e1d7b3-5d0e-4f3a-8b0c-6a8d7c3e5f5b")
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.ItemPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProdutoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("ItensPedidoAmbev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0047fb15-04fe-4bac-b839-0d2cd95d2220"),
                            PedidoId = new Guid("da7594af-83d2-4e5f-8a5b-f3daed0b03c3"),
                            ProdutoId = "SKU-CERV-PILSEN-600",
                            Quantidade = 800
                        },
                        new
                        {
                            Id = new Guid("14c173d8-2fd7-4977-828e-0bd52faf6a0f"),
                            PedidoId = new Guid("da7594af-83d2-4e5f-8a5b-f3daed0b03c3"),
                            ProdutoId = "SKU-REFRI-COLA-2L",
                            Quantidade = 400
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.ItemPedidoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PedidoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProdutoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoClienteId");

                    b.ToTable("ItensPedidoCliente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("741e854c-6d8b-46d7-acf5-e01e355b861b"),
                            PedidoClienteId = new Guid("f07d8248-21aa-4b7e-b280-13f1e38448ec"),
                            ProdutoId = "SKU-CERV-PILSEN-600",
                            Quantidade = 120
                        },
                        new
                        {
                            Id = new Guid("c4b7f99e-410a-4dac-90ee-40e469e15198"),
                            PedidoClienteId = new Guid("f07d8248-21aa-4b7e-b280-13f1e38448ec"),
                            ProdutoId = "SKU-REFRI-COLA-2L",
                            Quantidade = 50
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.NomeContato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("NomesContato");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1406218f-2029-47d8-bf58-3d4debaf8d09"),
                            IsPrincipal = true,
                            Nome = "Carlos Pereira",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("d381caf2-1653-4b05-a998-e67ea05f12ab"),
                            IsPrincipal = false,
                            Nome = "Ana Souza",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("71fb391b-7d07-4e32-9ffb-e579d5c65435"),
                            IsPrincipal = true,
                            Nome = "Roberto Lima",
                            RevendaId = new Guid("a2e1d7b3-5d0e-4f3a-8b0c-6a8d7c3e5f5b")
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEnvio")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TentativasEnvio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("PedidosAmbev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da7594af-83d2-4e5f-8a5b-f3daed0b03c3"),
                            DataCriacao = new DateTime(2025, 4, 21, 8, 0, 0, 0, DateTimeKind.Utc),
                            DataEnvio = new DateTime(2025, 4, 21, 14, 15, 0, 0, DateTimeKind.Utc),
                            OrderId = "_ORD_KJHGFD",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a"),
                            Status = 2,
                            TentativasEnvio = 1
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.PedidoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentificacaoCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("PedidosCliente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f07d8248-21aa-4b7e-b280-13f1e38448ec"),
                            DataPedido = new DateTime(2025, 4, 20, 10, 30, 0, 0, DateTimeKind.Utc),
                            IdentificacaoCliente = "Bar Amigos da Esquina",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.RevendaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Revendas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a"),
                            Cnpj = "71039888000183",
                            Email = "contato@distribuidoraalegria.com.br",
                            NomeFantasia = "Distribuidora Alegria",
                            RazaoSocial = "Comércio de Bebidas Alegria Ltda."
                        },
                        new
                        {
                            Id = new Guid("a2e1d7b3-5d0e-4f3a-8b0c-6a8d7c3e5f5b"),
                            Cnpj = "51468333000178",
                            Email = "compras@pontocertobebidas.com",
                            NomeFantasia = "Ponto Certo Bebidas",
                            RazaoSocial = "Bebidas Geladas Sempre ME"
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.Telefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("Telefones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e8bd9bf-614f-4c42-8e41-8df74c45e6c0"),
                            Numero = "11999998888",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("f3ea2588-753a-4d61-aba4-4994a8572417"),
                            Numero = "1123456789",
                            RevendaId = new Guid("f5b5a6d8-7c3e-4a8d-b0f3-3a0e5d7b2e1a")
                        },
                        new
                        {
                            Id = new Guid("f7f13271-be12-40b7-91a4-eeb50bd0b12f"),
                            Numero = "21988887777",
                            RevendaId = new Guid("a2e1d7b3-5d0e-4f3a-8b0c-6a8d7c3e5f5b")
                        });
                });

            modelBuilder.Entity("Revenda.Core.Entities.EnderecoEntrega", b =>
                {
                    b.HasOne("Revenda.Core.Entities.RevendaEntity", "Revenda")
                        .WithMany("EnderecosEntrega")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Revenda.Core.Entities.ItemPedido", b =>
                {
                    b.HasOne("Revenda.Core.Entities.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Revenda.Core.Entities.ItemPedidoCliente", b =>
                {
                    b.HasOne("Revenda.Core.Entities.PedidoCliente", "PedidoCliente")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PedidoCliente");
                });

            modelBuilder.Entity("Revenda.Core.Entities.NomeContato", b =>
                {
                    b.HasOne("Revenda.Core.Entities.RevendaEntity", "Revenda")
                        .WithMany("NomesContato")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Revenda.Core.Entities.Pedido", b =>
                {
                    b.HasOne("Revenda.Core.Entities.RevendaEntity", "Revenda")
                        .WithMany("Pedidos")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Revenda.Core.Entities.PedidoCliente", b =>
                {
                    b.HasOne("Revenda.Core.Entities.RevendaEntity", "Revenda")
                        .WithMany("PedidosCliente")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Revenda.Core.Entities.Telefone", b =>
                {
                    b.HasOne("Revenda.Core.Entities.RevendaEntity", "Revenda")
                        .WithMany("Telefones")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Revenda.Core.Entities.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Revenda.Core.Entities.PedidoCliente", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Revenda.Core.Entities.RevendaEntity", b =>
                {
                    b.Navigation("EnderecosEntrega");

                    b.Navigation("NomesContato");

                    b.Navigation("Pedidos");

                    b.Navigation("PedidosCliente");

                    b.Navigation("Telefones");
                });
#pragma warning restore 612, 618
        }
    }
}
